/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package spark.beans;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Message extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7446457629350048287L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Message\",\"namespace\":\"spark.beans\",\"fields\":[{\"name\":\"accountId\",\"type\":\"int\"},{\"name\":\"dbId\",\"type\":\"int\"},{\"name\":\"operationSource\",\"type\":\"int\"},{\"name\":\"streamId\",\"type\":\"int\"},{\"name\":\"datetimeField\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"StringField\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"string\"}]}]},{\"name\":\"intervalField\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"IntField\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"int\"}]}]},{\"name\":\"measureField\",\"type\":[\"null\",\"StringField\"]},{\"name\":\"attributeNameField\",\"type\":[\"null\",\"StringField\"]},{\"name\":\"attributeValueField\",\"type\":[\"null\",\"StringField\"]},{\"name\":\"categoryField\",\"type\":[\"null\",\"StringField\"]},{\"name\":\"countField\",\"type\":[\"null\",\"IntField\"]},{\"name\":\"sumField\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DoubleField\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"double\"}]}]},{\"name\":\"averageField\",\"type\":[\"null\",\"DoubleField\"]},{\"name\":\"maxField\",\"type\":[\"null\",\"DoubleField\"]},{\"name\":\"minField\",\"type\":[\"null\",\"DoubleField\"]},{\"name\":\"stddevField\",\"type\":[\"null\",\"DoubleField\"]},{\"name\":\"rateField\",\"type\":[\"null\",\"DoubleField\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Message> ENCODER =
      new BinaryMessageEncoder<Message>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Message> DECODER =
      new BinaryMessageDecoder<Message>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Message> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Message> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Message>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Message to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Message from a ByteBuffer. */
  public static Message fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int accountId;
  @Deprecated public int dbId;
  @Deprecated public int operationSource;
  @Deprecated public int streamId;
  @Deprecated public spark.beans.StringField datetimeField;
  @Deprecated public IntField intervalField;
  @Deprecated public spark.beans.StringField measureField;
  @Deprecated public spark.beans.StringField attributeNameField;
  @Deprecated public spark.beans.StringField attributeValueField;
  @Deprecated public spark.beans.StringField categoryField;
  @Deprecated public IntField countField;
  @Deprecated public DoubleField sumField;
  @Deprecated public DoubleField averageField;
  @Deprecated public DoubleField maxField;
  @Deprecated public DoubleField minField;
  @Deprecated public DoubleField stddevField;
  @Deprecated public DoubleField rateField;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Message() {}

  /**
   * All-args constructor.
   * @param accountId The new value for accountId
   * @param dbId The new value for dbId
   * @param operationSource The new value for operationSource
   * @param streamId The new value for streamId
   * @param datetimeField The new value for datetimeField
   * @param intervalField The new value for intervalField
   * @param measureField The new value for measureField
   * @param attributeNameField The new value for attributeNameField
   * @param attributeValueField The new value for attributeValueField
   * @param categoryField The new value for categoryField
   * @param countField The new value for countField
   * @param sumField The new value for sumField
   * @param averageField The new value for averageField
   * @param maxField The new value for maxField
   * @param minField The new value for minField
   * @param stddevField The new value for stddevField
   * @param rateField The new value for rateField
   */
  public Message(Integer accountId, Integer dbId, Integer operationSource, Integer streamId, spark.beans.StringField datetimeField, IntField intervalField, spark.beans.StringField measureField, spark.beans.StringField attributeNameField, spark.beans.StringField attributeValueField, spark.beans.StringField categoryField, IntField countField, DoubleField sumField, DoubleField averageField, DoubleField maxField, DoubleField minField, DoubleField stddevField, DoubleField rateField) {
    this.accountId = accountId;
    this.dbId = dbId;
    this.operationSource = operationSource;
    this.streamId = streamId;
    this.datetimeField = datetimeField;
    this.intervalField = intervalField;
    this.measureField = measureField;
    this.attributeNameField = attributeNameField;
    this.attributeValueField = attributeValueField;
    this.categoryField = categoryField;
    this.countField = countField;
    this.sumField = sumField;
    this.averageField = averageField;
    this.maxField = maxField;
    this.minField = minField;
    this.stddevField = stddevField;
    this.rateField = rateField;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return accountId;
    case 1: return dbId;
    case 2: return operationSource;
    case 3: return streamId;
    case 4: return datetimeField;
    case 5: return intervalField;
    case 6: return measureField;
    case 7: return attributeNameField;
    case 8: return attributeValueField;
    case 9: return categoryField;
    case 10: return countField;
    case 11: return sumField;
    case 12: return averageField;
    case 13: return maxField;
    case 14: return minField;
    case 15: return stddevField;
    case 16: return rateField;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: accountId = (Integer)value$; break;
    case 1: dbId = (Integer)value$; break;
    case 2: operationSource = (Integer)value$; break;
    case 3: streamId = (Integer)value$; break;
    case 4: datetimeField = (spark.beans.StringField)value$; break;
    case 5: intervalField = (IntField)value$; break;
    case 6: measureField = (spark.beans.StringField)value$; break;
    case 7: attributeNameField = (spark.beans.StringField)value$; break;
    case 8: attributeValueField = (spark.beans.StringField)value$; break;
    case 9: categoryField = (spark.beans.StringField)value$; break;
    case 10: countField = (IntField)value$; break;
    case 11: sumField = (DoubleField)value$; break;
    case 12: averageField = (DoubleField)value$; break;
    case 13: maxField = (DoubleField)value$; break;
    case 14: minField = (DoubleField)value$; break;
    case 15: stddevField = (DoubleField)value$; break;
    case 16: rateField = (DoubleField)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'accountId' field.
   * @return The value of the 'accountId' field.
   */
  public Integer getAccountId() {
    return accountId;
  }

  /**
   * Sets the value of the 'accountId' field.
   * @param value the value to set.
   */
  public void setAccountId(Integer value) {
    this.accountId = value;
  }

  /**
   * Gets the value of the 'dbId' field.
   * @return The value of the 'dbId' field.
   */
  public Integer getDbId() {
    return dbId;
  }

  /**
   * Sets the value of the 'dbId' field.
   * @param value the value to set.
   */
  public void setDbId(Integer value) {
    this.dbId = value;
  }

  /**
   * Gets the value of the 'operationSource' field.
   * @return The value of the 'operationSource' field.
   */
  public Integer getOperationSource() {
    return operationSource;
  }

  /**
   * Sets the value of the 'operationSource' field.
   * @param value the value to set.
   */
  public void setOperationSource(Integer value) {
    this.operationSource = value;
  }

  /**
   * Gets the value of the 'streamId' field.
   * @return The value of the 'streamId' field.
   */
  public Integer getStreamId() {
    return streamId;
  }

  /**
   * Sets the value of the 'streamId' field.
   * @param value the value to set.
   */
  public void setStreamId(Integer value) {
    this.streamId = value;
  }

  /**
   * Gets the value of the 'datetimeField' field.
   * @return The value of the 'datetimeField' field.
   */
  public spark.beans.StringField getDatetimeField() {
    return datetimeField;
  }

  /**
   * Sets the value of the 'datetimeField' field.
   * @param value the value to set.
   */
  public void setDatetimeField(spark.beans.StringField value) {
    this.datetimeField = value;
  }

  /**
   * Gets the value of the 'intervalField' field.
   * @return The value of the 'intervalField' field.
   */
  public IntField getIntervalField() {
    return intervalField;
  }

  /**
   * Sets the value of the 'intervalField' field.
   * @param value the value to set.
   */
  public void setIntervalField(IntField value) {
    this.intervalField = value;
  }

  /**
   * Gets the value of the 'measureField' field.
   * @return The value of the 'measureField' field.
   */
  public spark.beans.StringField getMeasureField() {
    return measureField;
  }

  /**
   * Sets the value of the 'measureField' field.
   * @param value the value to set.
   */
  public void setMeasureField(spark.beans.StringField value) {
    this.measureField = value;
  }

  /**
   * Gets the value of the 'attributeNameField' field.
   * @return The value of the 'attributeNameField' field.
   */
  public spark.beans.StringField getAttributeNameField() {
    return attributeNameField;
  }

  /**
   * Sets the value of the 'attributeNameField' field.
   * @param value the value to set.
   */
  public void setAttributeNameField(spark.beans.StringField value) {
    this.attributeNameField = value;
  }

  /**
   * Gets the value of the 'attributeValueField' field.
   * @return The value of the 'attributeValueField' field.
   */
  public spark.beans.StringField getAttributeValueField() {
    return attributeValueField;
  }

  /**
   * Sets the value of the 'attributeValueField' field.
   * @param value the value to set.
   */
  public void setAttributeValueField(spark.beans.StringField value) {
    this.attributeValueField = value;
  }

  /**
   * Gets the value of the 'categoryField' field.
   * @return The value of the 'categoryField' field.
   */
  public spark.beans.StringField getCategoryField() {
    return categoryField;
  }

  /**
   * Sets the value of the 'categoryField' field.
   * @param value the value to set.
   */
  public void setCategoryField(spark.beans.StringField value) {
    this.categoryField = value;
  }

  /**
   * Gets the value of the 'countField' field.
   * @return The value of the 'countField' field.
   */
  public IntField getCountField() {
    return countField;
  }

  /**
   * Sets the value of the 'countField' field.
   * @param value the value to set.
   */
  public void setCountField(IntField value) {
    this.countField = value;
  }

  /**
   * Gets the value of the 'sumField' field.
   * @return The value of the 'sumField' field.
   */
  public DoubleField getSumField() {
    return sumField;
  }

  /**
   * Sets the value of the 'sumField' field.
   * @param value the value to set.
   */
  public void setSumField(DoubleField value) {
    this.sumField = value;
  }

  /**
   * Gets the value of the 'averageField' field.
   * @return The value of the 'averageField' field.
   */
  public DoubleField getAverageField() {
    return averageField;
  }

  /**
   * Sets the value of the 'averageField' field.
   * @param value the value to set.
   */
  public void setAverageField(DoubleField value) {
    this.averageField = value;
  }

  /**
   * Gets the value of the 'maxField' field.
   * @return The value of the 'maxField' field.
   */
  public DoubleField getMaxField() {
    return maxField;
  }

  /**
   * Sets the value of the 'maxField' field.
   * @param value the value to set.
   */
  public void setMaxField(DoubleField value) {
    this.maxField = value;
  }

  /**
   * Gets the value of the 'minField' field.
   * @return The value of the 'minField' field.
   */
  public DoubleField getMinField() {
    return minField;
  }

  /**
   * Sets the value of the 'minField' field.
   * @param value the value to set.
   */
  public void setMinField(DoubleField value) {
    this.minField = value;
  }

  /**
   * Gets the value of the 'stddevField' field.
   * @return The value of the 'stddevField' field.
   */
  public DoubleField getStddevField() {
    return stddevField;
  }

  /**
   * Sets the value of the 'stddevField' field.
   * @param value the value to set.
   */
  public void setStddevField(DoubleField value) {
    this.stddevField = value;
  }

  /**
   * Gets the value of the 'rateField' field.
   * @return The value of the 'rateField' field.
   */
  public DoubleField getRateField() {
    return rateField;
  }

  /**
   * Sets the value of the 'rateField' field.
   * @param value the value to set.
   */
  public void setRateField(DoubleField value) {
    this.rateField = value;
  }

  /**
   * Creates a new Message RecordBuilder.
   * @return A new Message RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Message RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Message RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new Message RecordBuilder by copying an existing Message instance.
   * @param other The existing instance to copy.
   * @return A new Message RecordBuilder
   */
  public static Builder newBuilder(Message other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for Message instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Message>
    implements org.apache.avro.data.RecordBuilder<Message> {

    private int accountId;
    private int dbId;
    private int operationSource;
    private int streamId;
    private spark.beans.StringField datetimeField;
    private spark.beans.StringField.Builder datetimeFieldBuilder;
    private IntField intervalField;
    private IntField.Builder intervalFieldBuilder;
    private spark.beans.StringField measureField;
    private spark.beans.StringField.Builder measureFieldBuilder;
    private spark.beans.StringField attributeNameField;
    private spark.beans.StringField.Builder attributeNameFieldBuilder;
    private spark.beans.StringField attributeValueField;
    private spark.beans.StringField.Builder attributeValueFieldBuilder;
    private spark.beans.StringField categoryField;
    private spark.beans.StringField.Builder categoryFieldBuilder;
    private IntField countField;
    private IntField.Builder countFieldBuilder;
    private DoubleField sumField;
    private DoubleField.Builder sumFieldBuilder;
    private DoubleField averageField;
    private DoubleField.Builder averageFieldBuilder;
    private DoubleField maxField;
    private DoubleField.Builder maxFieldBuilder;
    private DoubleField minField;
    private DoubleField.Builder minFieldBuilder;
    private DoubleField stddevField;
    private DoubleField.Builder stddevFieldBuilder;
    private DoubleField rateField;
    private DoubleField.Builder rateFieldBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.accountId)) {
        this.accountId = data().deepCopy(fields()[0].schema(), other.accountId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dbId)) {
        this.dbId = data().deepCopy(fields()[1].schema(), other.dbId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.operationSource)) {
        this.operationSource = data().deepCopy(fields()[2].schema(), other.operationSource);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.streamId)) {
        this.streamId = data().deepCopy(fields()[3].schema(), other.streamId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.datetimeField)) {
        this.datetimeField = data().deepCopy(fields()[4].schema(), other.datetimeField);
        fieldSetFlags()[4] = true;
      }
      if (other.hasDatetimeFieldBuilder()) {
        this.datetimeFieldBuilder = spark.beans.StringField.newBuilder(other.getDatetimeFieldBuilder());
      }
      if (isValidValue(fields()[5], other.intervalField)) {
        this.intervalField = data().deepCopy(fields()[5].schema(), other.intervalField);
        fieldSetFlags()[5] = true;
      }
      if (other.hasIntervalFieldBuilder()) {
        this.intervalFieldBuilder = IntField.newBuilder(other.getIntervalFieldBuilder());
      }
      if (isValidValue(fields()[6], other.measureField)) {
        this.measureField = data().deepCopy(fields()[6].schema(), other.measureField);
        fieldSetFlags()[6] = true;
      }
      if (other.hasMeasureFieldBuilder()) {
        this.measureFieldBuilder = spark.beans.StringField.newBuilder(other.getMeasureFieldBuilder());
      }
      if (isValidValue(fields()[7], other.attributeNameField)) {
        this.attributeNameField = data().deepCopy(fields()[7].schema(), other.attributeNameField);
        fieldSetFlags()[7] = true;
      }
      if (other.hasAttributeNameFieldBuilder()) {
        this.attributeNameFieldBuilder = spark.beans.StringField.newBuilder(other.getAttributeNameFieldBuilder());
      }
      if (isValidValue(fields()[8], other.attributeValueField)) {
        this.attributeValueField = data().deepCopy(fields()[8].schema(), other.attributeValueField);
        fieldSetFlags()[8] = true;
      }
      if (other.hasAttributeValueFieldBuilder()) {
        this.attributeValueFieldBuilder = spark.beans.StringField.newBuilder(other.getAttributeValueFieldBuilder());
      }
      if (isValidValue(fields()[9], other.categoryField)) {
        this.categoryField = data().deepCopy(fields()[9].schema(), other.categoryField);
        fieldSetFlags()[9] = true;
      }
      if (other.hasCategoryFieldBuilder()) {
        this.categoryFieldBuilder = spark.beans.StringField.newBuilder(other.getCategoryFieldBuilder());
      }
      if (isValidValue(fields()[10], other.countField)) {
        this.countField = data().deepCopy(fields()[10].schema(), other.countField);
        fieldSetFlags()[10] = true;
      }
      if (other.hasCountFieldBuilder()) {
        this.countFieldBuilder = IntField.newBuilder(other.getCountFieldBuilder());
      }
      if (isValidValue(fields()[11], other.sumField)) {
        this.sumField = data().deepCopy(fields()[11].schema(), other.sumField);
        fieldSetFlags()[11] = true;
      }
      if (other.hasSumFieldBuilder()) {
        this.sumFieldBuilder = DoubleField.newBuilder(other.getSumFieldBuilder());
      }
      if (isValidValue(fields()[12], other.averageField)) {
        this.averageField = data().deepCopy(fields()[12].schema(), other.averageField);
        fieldSetFlags()[12] = true;
      }
      if (other.hasAverageFieldBuilder()) {
        this.averageFieldBuilder = DoubleField.newBuilder(other.getAverageFieldBuilder());
      }
      if (isValidValue(fields()[13], other.maxField)) {
        this.maxField = data().deepCopy(fields()[13].schema(), other.maxField);
        fieldSetFlags()[13] = true;
      }
      if (other.hasMaxFieldBuilder()) {
        this.maxFieldBuilder = DoubleField.newBuilder(other.getMaxFieldBuilder());
      }
      if (isValidValue(fields()[14], other.minField)) {
        this.minField = data().deepCopy(fields()[14].schema(), other.minField);
        fieldSetFlags()[14] = true;
      }
      if (other.hasMinFieldBuilder()) {
        this.minFieldBuilder = DoubleField.newBuilder(other.getMinFieldBuilder());
      }
      if (isValidValue(fields()[15], other.stddevField)) {
        this.stddevField = data().deepCopy(fields()[15].schema(), other.stddevField);
        fieldSetFlags()[15] = true;
      }
      if (other.hasStddevFieldBuilder()) {
        this.stddevFieldBuilder = DoubleField.newBuilder(other.getStddevFieldBuilder());
      }
      if (isValidValue(fields()[16], other.rateField)) {
        this.rateField = data().deepCopy(fields()[16].schema(), other.rateField);
        fieldSetFlags()[16] = true;
      }
      if (other.hasRateFieldBuilder()) {
        this.rateFieldBuilder = DoubleField.newBuilder(other.getRateFieldBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Message instance
     * @param other The existing instance to copy.
     */
    private Builder(Message other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.accountId)) {
        this.accountId = data().deepCopy(fields()[0].schema(), other.accountId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dbId)) {
        this.dbId = data().deepCopy(fields()[1].schema(), other.dbId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.operationSource)) {
        this.operationSource = data().deepCopy(fields()[2].schema(), other.operationSource);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.streamId)) {
        this.streamId = data().deepCopy(fields()[3].schema(), other.streamId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.datetimeField)) {
        this.datetimeField = data().deepCopy(fields()[4].schema(), other.datetimeField);
        fieldSetFlags()[4] = true;
      }
      this.datetimeFieldBuilder = null;
      if (isValidValue(fields()[5], other.intervalField)) {
        this.intervalField = data().deepCopy(fields()[5].schema(), other.intervalField);
        fieldSetFlags()[5] = true;
      }
      this.intervalFieldBuilder = null;
      if (isValidValue(fields()[6], other.measureField)) {
        this.measureField = data().deepCopy(fields()[6].schema(), other.measureField);
        fieldSetFlags()[6] = true;
      }
      this.measureFieldBuilder = null;
      if (isValidValue(fields()[7], other.attributeNameField)) {
        this.attributeNameField = data().deepCopy(fields()[7].schema(), other.attributeNameField);
        fieldSetFlags()[7] = true;
      }
      this.attributeNameFieldBuilder = null;
      if (isValidValue(fields()[8], other.attributeValueField)) {
        this.attributeValueField = data().deepCopy(fields()[8].schema(), other.attributeValueField);
        fieldSetFlags()[8] = true;
      }
      this.attributeValueFieldBuilder = null;
      if (isValidValue(fields()[9], other.categoryField)) {
        this.categoryField = data().deepCopy(fields()[9].schema(), other.categoryField);
        fieldSetFlags()[9] = true;
      }
      this.categoryFieldBuilder = null;
      if (isValidValue(fields()[10], other.countField)) {
        this.countField = data().deepCopy(fields()[10].schema(), other.countField);
        fieldSetFlags()[10] = true;
      }
      this.countFieldBuilder = null;
      if (isValidValue(fields()[11], other.sumField)) {
        this.sumField = data().deepCopy(fields()[11].schema(), other.sumField);
        fieldSetFlags()[11] = true;
      }
      this.sumFieldBuilder = null;
      if (isValidValue(fields()[12], other.averageField)) {
        this.averageField = data().deepCopy(fields()[12].schema(), other.averageField);
        fieldSetFlags()[12] = true;
      }
      this.averageFieldBuilder = null;
      if (isValidValue(fields()[13], other.maxField)) {
        this.maxField = data().deepCopy(fields()[13].schema(), other.maxField);
        fieldSetFlags()[13] = true;
      }
      this.maxFieldBuilder = null;
      if (isValidValue(fields()[14], other.minField)) {
        this.minField = data().deepCopy(fields()[14].schema(), other.minField);
        fieldSetFlags()[14] = true;
      }
      this.minFieldBuilder = null;
      if (isValidValue(fields()[15], other.stddevField)) {
        this.stddevField = data().deepCopy(fields()[15].schema(), other.stddevField);
        fieldSetFlags()[15] = true;
      }
      this.stddevFieldBuilder = null;
      if (isValidValue(fields()[16], other.rateField)) {
        this.rateField = data().deepCopy(fields()[16].schema(), other.rateField);
        fieldSetFlags()[16] = true;
      }
      this.rateFieldBuilder = null;
    }

    /**
      * Gets the value of the 'accountId' field.
      * @return The value.
      */
    public Integer getAccountId() {
      return accountId;
    }

    /**
      * Sets the value of the 'accountId' field.
      * @param value The value of 'accountId'.
      * @return This builder.
      */
    public Builder setAccountId(int value) {
      validate(fields()[0], value);
      this.accountId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'accountId' field has been set.
      * @return True if the 'accountId' field has been set, false otherwise.
      */
    public boolean hasAccountId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'accountId' field.
      * @return This builder.
      */
    public Builder clearAccountId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dbId' field.
      * @return The value.
      */
    public Integer getDbId() {
      return dbId;
    }

    /**
      * Sets the value of the 'dbId' field.
      * @param value The value of 'dbId'.
      * @return This builder.
      */
    public Builder setDbId(int value) {
      validate(fields()[1], value);
      this.dbId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dbId' field has been set.
      * @return True if the 'dbId' field has been set, false otherwise.
      */
    public boolean hasDbId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dbId' field.
      * @return This builder.
      */
    public Builder clearDbId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'operationSource' field.
      * @return The value.
      */
    public Integer getOperationSource() {
      return operationSource;
    }

    /**
      * Sets the value of the 'operationSource' field.
      * @param value The value of 'operationSource'.
      * @return This builder.
      */
    public Builder setOperationSource(int value) {
      validate(fields()[2], value);
      this.operationSource = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'operationSource' field has been set.
      * @return True if the 'operationSource' field has been set, false otherwise.
      */
    public boolean hasOperationSource() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'operationSource' field.
      * @return This builder.
      */
    public Builder clearOperationSource() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'streamId' field.
      * @return The value.
      */
    public Integer getStreamId() {
      return streamId;
    }

    /**
      * Sets the value of the 'streamId' field.
      * @param value The value of 'streamId'.
      * @return This builder.
      */
    public Builder setStreamId(int value) {
      validate(fields()[3], value);
      this.streamId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'streamId' field has been set.
      * @return True if the 'streamId' field has been set, false otherwise.
      */
    public boolean hasStreamId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'streamId' field.
      * @return This builder.
      */
    public Builder clearStreamId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'datetimeField' field.
      * @return The value.
      */
    public spark.beans.StringField getDatetimeField() {
      return datetimeField;
    }

    /**
      * Sets the value of the 'datetimeField' field.
      * @param value The value of 'datetimeField'.
      * @return This builder.
      */
    public Builder setDatetimeField(spark.beans.StringField value) {
      validate(fields()[4], value);
      this.datetimeFieldBuilder = null;
      this.datetimeField = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'datetimeField' field has been set.
      * @return True if the 'datetimeField' field has been set, false otherwise.
      */
    public boolean hasDatetimeField() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'datetimeField' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public spark.beans.StringField.Builder getDatetimeFieldBuilder() {
      if (datetimeFieldBuilder == null) {
        if (hasDatetimeField()) {
          setDatetimeFieldBuilder(spark.beans.StringField.newBuilder(datetimeField));
        } else {
          setDatetimeFieldBuilder(spark.beans.StringField.newBuilder());
        }
      }
      return datetimeFieldBuilder;
    }

    /**
     * Sets the Builder instance for the 'datetimeField' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setDatetimeFieldBuilder(spark.beans.StringField.Builder value) {
      clearDatetimeField();
      datetimeFieldBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'datetimeField' field has an active Builder instance
     * @return True if the 'datetimeField' field has an active Builder instance
     */
    public boolean hasDatetimeFieldBuilder() {
      return datetimeFieldBuilder != null;
    }

    /**
      * Clears the value of the 'datetimeField' field.
      * @return This builder.
      */
    public Builder clearDatetimeField() {
      datetimeField = null;
      datetimeFieldBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'intervalField' field.
      * @return The value.
      */
    public IntField getIntervalField() {
      return intervalField;
    }

    /**
      * Sets the value of the 'intervalField' field.
      * @param value The value of 'intervalField'.
      * @return This builder.
      */
    public Builder setIntervalField(IntField value) {
      validate(fields()[5], value);
      this.intervalFieldBuilder = null;
      this.intervalField = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'intervalField' field has been set.
      * @return True if the 'intervalField' field has been set, false otherwise.
      */
    public boolean hasIntervalField() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'intervalField' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public IntField.Builder getIntervalFieldBuilder() {
      if (intervalFieldBuilder == null) {
        if (hasIntervalField()) {
          setIntervalFieldBuilder(IntField.newBuilder(intervalField));
        } else {
          setIntervalFieldBuilder(IntField.newBuilder());
        }
      }
      return intervalFieldBuilder;
    }

    /**
     * Sets the Builder instance for the 'intervalField' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setIntervalFieldBuilder(IntField.Builder value) {
      clearIntervalField();
      intervalFieldBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'intervalField' field has an active Builder instance
     * @return True if the 'intervalField' field has an active Builder instance
     */
    public boolean hasIntervalFieldBuilder() {
      return intervalFieldBuilder != null;
    }

    /**
      * Clears the value of the 'intervalField' field.
      * @return This builder.
      */
    public Builder clearIntervalField() {
      intervalField = null;
      intervalFieldBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'measureField' field.
      * @return The value.
      */
    public spark.beans.StringField getMeasureField() {
      return measureField;
    }

    /**
      * Sets the value of the 'measureField' field.
      * @param value The value of 'measureField'.
      * @return This builder.
      */
    public Builder setMeasureField(spark.beans.StringField value) {
      validate(fields()[6], value);
      this.measureFieldBuilder = null;
      this.measureField = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'measureField' field has been set.
      * @return True if the 'measureField' field has been set, false otherwise.
      */
    public boolean hasMeasureField() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'measureField' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public spark.beans.StringField.Builder getMeasureFieldBuilder() {
      if (measureFieldBuilder == null) {
        if (hasMeasureField()) {
          setMeasureFieldBuilder(spark.beans.StringField.newBuilder(measureField));
        } else {
          setMeasureFieldBuilder(spark.beans.StringField.newBuilder());
        }
      }
      return measureFieldBuilder;
    }

    /**
     * Sets the Builder instance for the 'measureField' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setMeasureFieldBuilder(spark.beans.StringField.Builder value) {
      clearMeasureField();
      measureFieldBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'measureField' field has an active Builder instance
     * @return True if the 'measureField' field has an active Builder instance
     */
    public boolean hasMeasureFieldBuilder() {
      return measureFieldBuilder != null;
    }

    /**
      * Clears the value of the 'measureField' field.
      * @return This builder.
      */
    public Builder clearMeasureField() {
      measureField = null;
      measureFieldBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'attributeNameField' field.
      * @return The value.
      */
    public spark.beans.StringField getAttributeNameField() {
      return attributeNameField;
    }

    /**
      * Sets the value of the 'attributeNameField' field.
      * @param value The value of 'attributeNameField'.
      * @return This builder.
      */
    public Builder setAttributeNameField(spark.beans.StringField value) {
      validate(fields()[7], value);
      this.attributeNameFieldBuilder = null;
      this.attributeNameField = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'attributeNameField' field has been set.
      * @return True if the 'attributeNameField' field has been set, false otherwise.
      */
    public boolean hasAttributeNameField() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'attributeNameField' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public spark.beans.StringField.Builder getAttributeNameFieldBuilder() {
      if (attributeNameFieldBuilder == null) {
        if (hasAttributeNameField()) {
          setAttributeNameFieldBuilder(spark.beans.StringField.newBuilder(attributeNameField));
        } else {
          setAttributeNameFieldBuilder(spark.beans.StringField.newBuilder());
        }
      }
      return attributeNameFieldBuilder;
    }

    /**
     * Sets the Builder instance for the 'attributeNameField' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setAttributeNameFieldBuilder(spark.beans.StringField.Builder value) {
      clearAttributeNameField();
      attributeNameFieldBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'attributeNameField' field has an active Builder instance
     * @return True if the 'attributeNameField' field has an active Builder instance
     */
    public boolean hasAttributeNameFieldBuilder() {
      return attributeNameFieldBuilder != null;
    }

    /**
      * Clears the value of the 'attributeNameField' field.
      * @return This builder.
      */
    public Builder clearAttributeNameField() {
      attributeNameField = null;
      attributeNameFieldBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'attributeValueField' field.
      * @return The value.
      */
    public spark.beans.StringField getAttributeValueField() {
      return attributeValueField;
    }

    /**
      * Sets the value of the 'attributeValueField' field.
      * @param value The value of 'attributeValueField'.
      * @return This builder.
      */
    public Builder setAttributeValueField(spark.beans.StringField value) {
      validate(fields()[8], value);
      this.attributeValueFieldBuilder = null;
      this.attributeValueField = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'attributeValueField' field has been set.
      * @return True if the 'attributeValueField' field has been set, false otherwise.
      */
    public boolean hasAttributeValueField() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'attributeValueField' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public spark.beans.StringField.Builder getAttributeValueFieldBuilder() {
      if (attributeValueFieldBuilder == null) {
        if (hasAttributeValueField()) {
          setAttributeValueFieldBuilder(spark.beans.StringField.newBuilder(attributeValueField));
        } else {
          setAttributeValueFieldBuilder(spark.beans.StringField.newBuilder());
        }
      }
      return attributeValueFieldBuilder;
    }

    /**
     * Sets the Builder instance for the 'attributeValueField' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setAttributeValueFieldBuilder(spark.beans.StringField.Builder value) {
      clearAttributeValueField();
      attributeValueFieldBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'attributeValueField' field has an active Builder instance
     * @return True if the 'attributeValueField' field has an active Builder instance
     */
    public boolean hasAttributeValueFieldBuilder() {
      return attributeValueFieldBuilder != null;
    }

    /**
      * Clears the value of the 'attributeValueField' field.
      * @return This builder.
      */
    public Builder clearAttributeValueField() {
      attributeValueField = null;
      attributeValueFieldBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'categoryField' field.
      * @return The value.
      */
    public spark.beans.StringField getCategoryField() {
      return categoryField;
    }

    /**
      * Sets the value of the 'categoryField' field.
      * @param value The value of 'categoryField'.
      * @return This builder.
      */
    public Builder setCategoryField(spark.beans.StringField value) {
      validate(fields()[9], value);
      this.categoryFieldBuilder = null;
      this.categoryField = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'categoryField' field has been set.
      * @return True if the 'categoryField' field has been set, false otherwise.
      */
    public boolean hasCategoryField() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'categoryField' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public spark.beans.StringField.Builder getCategoryFieldBuilder() {
      if (categoryFieldBuilder == null) {
        if (hasCategoryField()) {
          setCategoryFieldBuilder(spark.beans.StringField.newBuilder(categoryField));
        } else {
          setCategoryFieldBuilder(spark.beans.StringField.newBuilder());
        }
      }
      return categoryFieldBuilder;
    }

    /**
     * Sets the Builder instance for the 'categoryField' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setCategoryFieldBuilder(spark.beans.StringField.Builder value) {
      clearCategoryField();
      categoryFieldBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'categoryField' field has an active Builder instance
     * @return True if the 'categoryField' field has an active Builder instance
     */
    public boolean hasCategoryFieldBuilder() {
      return categoryFieldBuilder != null;
    }

    /**
      * Clears the value of the 'categoryField' field.
      * @return This builder.
      */
    public Builder clearCategoryField() {
      categoryField = null;
      categoryFieldBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'countField' field.
      * @return The value.
      */
    public IntField getCountField() {
      return countField;
    }

    /**
      * Sets the value of the 'countField' field.
      * @param value The value of 'countField'.
      * @return This builder.
      */
    public Builder setCountField(IntField value) {
      validate(fields()[10], value);
      this.countFieldBuilder = null;
      this.countField = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'countField' field has been set.
      * @return True if the 'countField' field has been set, false otherwise.
      */
    public boolean hasCountField() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'countField' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public IntField.Builder getCountFieldBuilder() {
      if (countFieldBuilder == null) {
        if (hasCountField()) {
          setCountFieldBuilder(IntField.newBuilder(countField));
        } else {
          setCountFieldBuilder(IntField.newBuilder());
        }
      }
      return countFieldBuilder;
    }

    /**
     * Sets the Builder instance for the 'countField' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setCountFieldBuilder(IntField.Builder value) {
      clearCountField();
      countFieldBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'countField' field has an active Builder instance
     * @return True if the 'countField' field has an active Builder instance
     */
    public boolean hasCountFieldBuilder() {
      return countFieldBuilder != null;
    }

    /**
      * Clears the value of the 'countField' field.
      * @return This builder.
      */
    public Builder clearCountField() {
      countField = null;
      countFieldBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'sumField' field.
      * @return The value.
      */
    public DoubleField getSumField() {
      return sumField;
    }

    /**
      * Sets the value of the 'sumField' field.
      * @param value The value of 'sumField'.
      * @return This builder.
      */
    public Builder setSumField(DoubleField value) {
      validate(fields()[11], value);
      this.sumFieldBuilder = null;
      this.sumField = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'sumField' field has been set.
      * @return True if the 'sumField' field has been set, false otherwise.
      */
    public boolean hasSumField() {
      return fieldSetFlags()[11];
    }

    /**
     * Gets the Builder instance for the 'sumField' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public DoubleField.Builder getSumFieldBuilder() {
      if (sumFieldBuilder == null) {
        if (hasSumField()) {
          setSumFieldBuilder(DoubleField.newBuilder(sumField));
        } else {
          setSumFieldBuilder(DoubleField.newBuilder());
        }
      }
      return sumFieldBuilder;
    }

    /**
     * Sets the Builder instance for the 'sumField' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setSumFieldBuilder(DoubleField.Builder value) {
      clearSumField();
      sumFieldBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'sumField' field has an active Builder instance
     * @return True if the 'sumField' field has an active Builder instance
     */
    public boolean hasSumFieldBuilder() {
      return sumFieldBuilder != null;
    }

    /**
      * Clears the value of the 'sumField' field.
      * @return This builder.
      */
    public Builder clearSumField() {
      sumField = null;
      sumFieldBuilder = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'averageField' field.
      * @return The value.
      */
    public DoubleField getAverageField() {
      return averageField;
    }

    /**
      * Sets the value of the 'averageField' field.
      * @param value The value of 'averageField'.
      * @return This builder.
      */
    public Builder setAverageField(DoubleField value) {
      validate(fields()[12], value);
      this.averageFieldBuilder = null;
      this.averageField = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'averageField' field has been set.
      * @return True if the 'averageField' field has been set, false otherwise.
      */
    public boolean hasAverageField() {
      return fieldSetFlags()[12];
    }

    /**
     * Gets the Builder instance for the 'averageField' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public DoubleField.Builder getAverageFieldBuilder() {
      if (averageFieldBuilder == null) {
        if (hasAverageField()) {
          setAverageFieldBuilder(DoubleField.newBuilder(averageField));
        } else {
          setAverageFieldBuilder(DoubleField.newBuilder());
        }
      }
      return averageFieldBuilder;
    }

    /**
     * Sets the Builder instance for the 'averageField' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setAverageFieldBuilder(DoubleField.Builder value) {
      clearAverageField();
      averageFieldBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'averageField' field has an active Builder instance
     * @return True if the 'averageField' field has an active Builder instance
     */
    public boolean hasAverageFieldBuilder() {
      return averageFieldBuilder != null;
    }

    /**
      * Clears the value of the 'averageField' field.
      * @return This builder.
      */
    public Builder clearAverageField() {
      averageField = null;
      averageFieldBuilder = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxField' field.
      * @return The value.
      */
    public DoubleField getMaxField() {
      return maxField;
    }

    /**
      * Sets the value of the 'maxField' field.
      * @param value The value of 'maxField'.
      * @return This builder.
      */
    public Builder setMaxField(DoubleField value) {
      validate(fields()[13], value);
      this.maxFieldBuilder = null;
      this.maxField = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'maxField' field has been set.
      * @return True if the 'maxField' field has been set, false otherwise.
      */
    public boolean hasMaxField() {
      return fieldSetFlags()[13];
    }

    /**
     * Gets the Builder instance for the 'maxField' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public DoubleField.Builder getMaxFieldBuilder() {
      if (maxFieldBuilder == null) {
        if (hasMaxField()) {
          setMaxFieldBuilder(DoubleField.newBuilder(maxField));
        } else {
          setMaxFieldBuilder(DoubleField.newBuilder());
        }
      }
      return maxFieldBuilder;
    }

    /**
     * Sets the Builder instance for the 'maxField' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setMaxFieldBuilder(DoubleField.Builder value) {
      clearMaxField();
      maxFieldBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'maxField' field has an active Builder instance
     * @return True if the 'maxField' field has an active Builder instance
     */
    public boolean hasMaxFieldBuilder() {
      return maxFieldBuilder != null;
    }

    /**
      * Clears the value of the 'maxField' field.
      * @return This builder.
      */
    public Builder clearMaxField() {
      maxField = null;
      maxFieldBuilder = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'minField' field.
      * @return The value.
      */
    public DoubleField getMinField() {
      return minField;
    }

    /**
      * Sets the value of the 'minField' field.
      * @param value The value of 'minField'.
      * @return This builder.
      */
    public Builder setMinField(DoubleField value) {
      validate(fields()[14], value);
      this.minFieldBuilder = null;
      this.minField = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'minField' field has been set.
      * @return True if the 'minField' field has been set, false otherwise.
      */
    public boolean hasMinField() {
      return fieldSetFlags()[14];
    }

    /**
     * Gets the Builder instance for the 'minField' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public DoubleField.Builder getMinFieldBuilder() {
      if (minFieldBuilder == null) {
        if (hasMinField()) {
          setMinFieldBuilder(DoubleField.newBuilder(minField));
        } else {
          setMinFieldBuilder(DoubleField.newBuilder());
        }
      }
      return minFieldBuilder;
    }

    /**
     * Sets the Builder instance for the 'minField' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setMinFieldBuilder(DoubleField.Builder value) {
      clearMinField();
      minFieldBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'minField' field has an active Builder instance
     * @return True if the 'minField' field has an active Builder instance
     */
    public boolean hasMinFieldBuilder() {
      return minFieldBuilder != null;
    }

    /**
      * Clears the value of the 'minField' field.
      * @return This builder.
      */
    public Builder clearMinField() {
      minField = null;
      minFieldBuilder = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'stddevField' field.
      * @return The value.
      */
    public DoubleField getStddevField() {
      return stddevField;
    }

    /**
      * Sets the value of the 'stddevField' field.
      * @param value The value of 'stddevField'.
      * @return This builder.
      */
    public Builder setStddevField(DoubleField value) {
      validate(fields()[15], value);
      this.stddevFieldBuilder = null;
      this.stddevField = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'stddevField' field has been set.
      * @return True if the 'stddevField' field has been set, false otherwise.
      */
    public boolean hasStddevField() {
      return fieldSetFlags()[15];
    }

    /**
     * Gets the Builder instance for the 'stddevField' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public DoubleField.Builder getStddevFieldBuilder() {
      if (stddevFieldBuilder == null) {
        if (hasStddevField()) {
          setStddevFieldBuilder(DoubleField.newBuilder(stddevField));
        } else {
          setStddevFieldBuilder(DoubleField.newBuilder());
        }
      }
      return stddevFieldBuilder;
    }

    /**
     * Sets the Builder instance for the 'stddevField' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setStddevFieldBuilder(DoubleField.Builder value) {
      clearStddevField();
      stddevFieldBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'stddevField' field has an active Builder instance
     * @return True if the 'stddevField' field has an active Builder instance
     */
    public boolean hasStddevFieldBuilder() {
      return stddevFieldBuilder != null;
    }

    /**
      * Clears the value of the 'stddevField' field.
      * @return This builder.
      */
    public Builder clearStddevField() {
      stddevField = null;
      stddevFieldBuilder = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'rateField' field.
      * @return The value.
      */
    public DoubleField getRateField() {
      return rateField;
    }

    /**
      * Sets the value of the 'rateField' field.
      * @param value The value of 'rateField'.
      * @return This builder.
      */
    public Builder setRateField(DoubleField value) {
      validate(fields()[16], value);
      this.rateFieldBuilder = null;
      this.rateField = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'rateField' field has been set.
      * @return True if the 'rateField' field has been set, false otherwise.
      */
    public boolean hasRateField() {
      return fieldSetFlags()[16];
    }

    /**
     * Gets the Builder instance for the 'rateField' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public DoubleField.Builder getRateFieldBuilder() {
      if (rateFieldBuilder == null) {
        if (hasRateField()) {
          setRateFieldBuilder(DoubleField.newBuilder(rateField));
        } else {
          setRateFieldBuilder(DoubleField.newBuilder());
        }
      }
      return rateFieldBuilder;
    }

    /**
     * Sets the Builder instance for the 'rateField' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setRateFieldBuilder(DoubleField.Builder value) {
      clearRateField();
      rateFieldBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'rateField' field has an active Builder instance
     * @return True if the 'rateField' field has an active Builder instance
     */
    public boolean hasRateFieldBuilder() {
      return rateFieldBuilder != null;
    }

    /**
      * Clears the value of the 'rateField' field.
      * @return This builder.
      */
    public Builder clearRateField() {
      rateField = null;
      rateFieldBuilder = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Message build() {
      try {
        Message record = new Message();
        record.accountId = fieldSetFlags()[0] ? this.accountId : (Integer) defaultValue(fields()[0]);
        record.dbId = fieldSetFlags()[1] ? this.dbId : (Integer) defaultValue(fields()[1]);
        record.operationSource = fieldSetFlags()[2] ? this.operationSource : (Integer) defaultValue(fields()[2]);
        record.streamId = fieldSetFlags()[3] ? this.streamId : (Integer) defaultValue(fields()[3]);
        if (datetimeFieldBuilder != null) {
          record.datetimeField = this.datetimeFieldBuilder.build();
        } else {
          record.datetimeField = fieldSetFlags()[4] ? this.datetimeField : (spark.beans.StringField) defaultValue(fields()[4]);
        }
        if (intervalFieldBuilder != null) {
          record.intervalField = this.intervalFieldBuilder.build();
        } else {
          record.intervalField = fieldSetFlags()[5] ? this.intervalField : (IntField) defaultValue(fields()[5]);
        }
        if (measureFieldBuilder != null) {
          record.measureField = this.measureFieldBuilder.build();
        } else {
          record.measureField = fieldSetFlags()[6] ? this.measureField : (spark.beans.StringField) defaultValue(fields()[6]);
        }
        if (attributeNameFieldBuilder != null) {
          record.attributeNameField = this.attributeNameFieldBuilder.build();
        } else {
          record.attributeNameField = fieldSetFlags()[7] ? this.attributeNameField : (spark.beans.StringField) defaultValue(fields()[7]);
        }
        if (attributeValueFieldBuilder != null) {
          record.attributeValueField = this.attributeValueFieldBuilder.build();
        } else {
          record.attributeValueField = fieldSetFlags()[8] ? this.attributeValueField : (spark.beans.StringField) defaultValue(fields()[8]);
        }
        if (categoryFieldBuilder != null) {
          record.categoryField = this.categoryFieldBuilder.build();
        } else {
          record.categoryField = fieldSetFlags()[9] ? this.categoryField : (spark.beans.StringField) defaultValue(fields()[9]);
        }
        if (countFieldBuilder != null) {
          record.countField = this.countFieldBuilder.build();
        } else {
          record.countField = fieldSetFlags()[10] ? this.countField : (IntField) defaultValue(fields()[10]);
        }
        if (sumFieldBuilder != null) {
          record.sumField = this.sumFieldBuilder.build();
        } else {
          record.sumField = fieldSetFlags()[11] ? this.sumField : (DoubleField) defaultValue(fields()[11]);
        }
        if (averageFieldBuilder != null) {
          record.averageField = this.averageFieldBuilder.build();
        } else {
          record.averageField = fieldSetFlags()[12] ? this.averageField : (DoubleField) defaultValue(fields()[12]);
        }
        if (maxFieldBuilder != null) {
          record.maxField = this.maxFieldBuilder.build();
        } else {
          record.maxField = fieldSetFlags()[13] ? this.maxField : (DoubleField) defaultValue(fields()[13]);
        }
        if (minFieldBuilder != null) {
          record.minField = this.minFieldBuilder.build();
        } else {
          record.minField = fieldSetFlags()[14] ? this.minField : (DoubleField) defaultValue(fields()[14]);
        }
        if (stddevFieldBuilder != null) {
          record.stddevField = this.stddevFieldBuilder.build();
        } else {
          record.stddevField = fieldSetFlags()[15] ? this.stddevField : (DoubleField) defaultValue(fields()[15]);
        }
        if (rateFieldBuilder != null) {
          record.rateField = this.rateFieldBuilder.build();
        } else {
          record.rateField = fieldSetFlags()[16] ? this.rateField : (DoubleField) defaultValue(fields()[16]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Message>
    WRITER$ = (org.apache.avro.io.DatumWriter<Message>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Message>
    READER$ = (org.apache.avro.io.DatumReader<Message>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
